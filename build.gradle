/*
 * Copyright 2021-2022 Micro Focus or one of its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jk1.license.LicenseReportExtension
import com.github.jk1.license.ModuleData
import com.github.jk1.license.ProjectData
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.LicenseDataCollector
import com.github.jk1.license.render.ReportRenderer

plugins {
    id "com.github.jk1.dependency-license-report" version "2.0"
    id "com.benjaminsproule.swagger" version "1.0.14" apply false
}

ext {
    buildVersion = project.hasProperty("buildVersion") ? project.getProperty("buildVersion") : "0.0.0-snapshot.0"
    suffixForPublish = project.hasProperty("suffixForPublish") ? project.getProperty("suffixForPublish") : "SNAPSHOT"

    dockerContextPath = "${buildDir.path}/docker/"

    fabric8Version = "5.12.1"
    embeddedFlinkVersion = "1.14.3"
    scalaVersion = "2.12"
    jacksonVersion = "2.13.0"

    libraries = [
            javaxInject: "javax.inject:javax.inject:1",
            javaxAnnotationApi: "javax.annotation:javax.annotation-api:1.3.2",
            javaxServletApi: "javax.servlet:javax.servlet-api:4.0.1",
            jaxRsApi: "javax.ws.rs:javax.ws.rs-api:2.1.1",
            k8sClient: "io.fabric8:kubernetes-client:$fabric8Version",
            k8sMockServer: "io.fabric8:kubernetes-server-mock:$fabric8Version",
            httpClient: "org.apache.httpcomponents:httpclient:4.5.13",
            jacksonKotlin: [
                    "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
            ],
            jacksonYaml: [
                    "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
            ],
    ]
}

allprojects {
    group "com.microfocus.analytics"
    version buildVersion

    repositories {
        mavenCentral()
    }
}

tasks.named("wrapper") {
    distributionType = Wrapper.DistributionType.ALL
}

task clean {
    doFirst {
        buildDir.deleteDir()
    }
}

gradle.taskGraph.whenReady {
    if (!project.hasProperty("jsonSchemaFlattener")) {
        gradle.taskGraph.allTasks.each { Task gradleTask ->
            // "project" will equal each subproject under this folder
            if (gradleTask.project.name == "json-schema-flattener") {
                gradleTask.onlyIf = { false } // replace onlyIf closure entirely by using =
            }
        }
    }
}

// License reporting

licenseReport {
    // for dependencies that aren't resolved correctly
    // url, license, licenseUrl
    def manualInfo = [
            "animal-sniffer-annotations": [
                    "https://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/",
                    "MIT License",
                    "https://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/license.html"
            ],
            "bc-fips": [
                    "https://www.bouncycastle.org/index.html",
                    "Bouncy Castle License",
                    "https://www.bouncycastle.org/licence.html"
            ],
            "bcpkix-fips": [
                    "https://www.bouncycastle.org/index.html",
                    "Bouncy Castle License",
                    "https://www.bouncycastle.org/licence.html"
            ],
            "jandex": [
                    "http://www.jboss.org",
                    "Apache License; Version 2.0",
                    "https://www.apache.org/licenses/LICENSE-2.0"
            ],
            "ST4": [
                    "https://www.stringtemplate.org/index.html",
                    "The 3-Clause BSD License",
                    "https://www.stringtemplate.org/license.html"
            ],
            "asm-analysis": [
                    "https://asm.ow2.io/",
                    "The 3-Clause BSD License",
                    "https://asm.ow2.io/license.html"
            ],
            "asm-commons": [
                    "https://asm.ow2.io/",
                    "The 3-Clause BSD License",
                    "https://asm.ow2.io/license.html"
            ],
            "asm-tree": [
                    "https://asm.ow2.io/",
                    "The 3-Clause BSD License",
                    "https://asm.ow2.io/license.html"
            ],
            "asm-util": [
                    "https://asm.ow2.io/",
                    "The 3-Clause BSD License",
                    "https://asm.ow2.io/license.html"
            ],
            "asm": [
                    "https://asm.ow2.io/",
                    "The 3-Clause BSD License",
                    "https://asm.ow2.io/license.html"
            ],
            "commons-compress": [
                    "https://commons.apache.org/proper/commons-compress/",
                    "Apache License; Version 2.0",
                    "https://www.apache.org/licenses/LICENSE-2.0"
            ],
            "klaxon": [
                    "https://github.com/cbeust/klaxon",
                    "Apache License; Version 2.0",
                    "https://www.apache.org/licenses/LICENSE-2.0"
            ],
            "jackson-bom": [
                    "https://github.com/FasterXML/jackson-bom",
                    "Apache License; Version 2.0",
                    "https://www.apache.org/licenses/LICENSE-2.0"
            ],
            "kotlinx-coroutines-core": [
                    "https://github.com/Kotlin/kotlinx.coroutines",
                    "Apache License; Version 2.0",
                    "https://www.apache.org/licenses/LICENSE-2.0"
            ],
    ]

    gradle.taskGraph.whenReady {
        projects = rootProject.subprojects.findAll {
            it.plugins.hasPlugin("license-report-plugin")
        }
    }

    outputDir = "${projectDir.path}/licenses"
    configurations = ["runtimeClasspath"]
    filters = [new LicenseBundleNormalizer()]
    excludeGroups = [
            "com.microfocus.*",
            "shadow.flink.io.fabric8.*",
    ]
    renderers = [new ReportRenderer() {
        private String separator = ','
        private String newLine = '\n'

        @Override
        void render(ProjectData data) {
            LicenseReportExtension config = data.project.licenseReport
            File output = new File(config.outputDir, "licenses.csv")
            output.write('')

            output << "Product" +
                    "${separator}Version" +
                    "${separator}Supplier" +
                    "${separator}License URL" +
                    "${separator}Homepage URL" +
                    "${separator}Download URL" +
                    "${separator}License Proof URL" +
                    "${separator}Link Type" +
                    "${separator}License Name" +
                    "${newLine}"

            data.allDependencies.sort().each { ModuleData moduleData ->
                String moduleUrl
                String moduleLicense
                String moduleLicenseUrl

                if (manualInfo.containsKey(moduleData.name)) {
                    (moduleUrl, moduleLicense, moduleLicenseUrl) = manualInfo[moduleData.name]
                } else {
                    (moduleUrl, moduleLicense, moduleLicenseUrl) = LicenseDataCollector.singleModuleLicenseInfo(moduleData)
                }

                String mvnUrl = "https://mvnrepository.com/artifact/${moduleData.group}/${moduleData.name}/${moduleData.version}"

                output << moduleData.name +
                        separator + moduleData.version +
                        separator + getSupplier(moduleData) +
                        separator + moduleLicenseUrl +
                        separator + (moduleUrl ?: "") +
                        separator + mvnUrl +
                        separator + mvnUrl + // license proof is licenses section...
                        separator + "Dynamic" +
                        separator + (moduleLicense?.trim()?.replace(",", ";")?.replaceAll("[\\s]{2,}", " ") ?: "") +
                        newLine
            }
        }

        private String getSupplier(ModuleData moduleData) {
            def candidates = [
                    moduleData.poms ? moduleData.poms.first()?.organization?.name : null,
                    moduleData.manifests ? moduleData.manifests.first()?.vendor : null,
            ]

            return (candidates - null).unique().join("; ").replace(",", ";")
        }
    }]
}

