/*
 * Copyright 2021-2022 Micro Focus or one of its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// https://github.com/wangyang0918/flink-native-k8s-operator/pull/8
import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
import com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext
import shadow.org.apache.tools.zip.ZipEntry
import shadow.org.apache.tools.zip.ZipOutputStream
import shadow.org.codehaus.plexus.util.IOUtil

plugins {
    id "itom-java-plugin"
    id "itom-shadow-plugin"
}

configurations {
    all {
        exclude group: "org.slf4j"
    }
}

dependencies {
    implementation("org.apache.flink:flink-kubernetes_$scalaVersion:$embeddedFlinkVersion") {
        transitive = false
    }
}

// https://github.com/johnrengelman/shadow/issues/505
// https://github.com/johnrengelman/shadow/blob/master/src/main/groovy/com/github/jengelman/gradle/plugins/shadow/transformers/AppendingTransformer.groovy
class ShadingTransformer implements Transformer {
    private Map<String, ByteArrayOutputStream> perPathData = new HashMap<>()

    @Override
    boolean canTransformResource(FileTreeElement element) {
        String fullPath = element.relativePath.getPathString()
        if (fullPath.contains("fabric8")) {
            return true
        }
        return false
    }

    @Override
    void transform(TransformerContext context) {
        perPathData.put(context.path, new ByteArrayOutputStream())
        ByteArrayOutputStream data = perPathData.get(context.path)
        BufferedReader reader = new BufferedReader(new InputStreamReader(context.is))
        reader.withCloseable { r ->
            while (r.ready()) {
                String line = r.readLine().trim()
                if (line.isEmpty() || line.startsWith("#")) {
                    continue
                }
                data.write("shaded.flink.".bytes)
                data.write(line.bytes)
                data.write('\n'.bytes)
            }
        }
        context.is.close()
    }

    @Override
    boolean hasTransformedResource() {
        return perPathData.any { it.value.size() > 0 }
    }

    @Override
    void modifyOutputStream(ZipOutputStream jos, boolean preserveFileTimestamps) {
        try {
            perPathData.each { data ->
                ZipEntry entry = new ZipEntry(data.key.replace("io.fabric8", "shadow.flink.io.fabric8"))
                entry.time = TransformerContext.getEntryTimestamp(preserveFileTimestamps, entry.time)
                jos.putNextEntry(entry)
                IOUtil.copy(new ByteArrayInputStream(data.value.toByteArray()), jos)
            }
        } finally {
            perPathData.each {
                it.value.close()
                it.value.reset()
            }
            perPathData.clear()
        }
    }
}

shadowJar {
    transform(ShadingTransformer)
    relocate("io.fabric8", "shadow.flink.io.fabric8")
}

jar {
    enabled = false
}
